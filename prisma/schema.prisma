// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  name                String?
  image               String?
  emailVerified       DateTime?
  password            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Account             Account[]
  Session             Session[]
  LLMProviderSettings LLMProviderSettings[]
  Form                Form[]
  Conversation        Conversation[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LLMProviderSettings {
  id             String   @id @default(cuid())
  providerName   String
  userEmail      String
  user           User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  LLMProviderKey String

  @@index([userEmail])
}

model Form {
  id             String         @id @default(cuid())
  title          String
  description    String?
  fields         Json
  userEmail      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  responses      FormResponse[]
  conversationId String?
  conversation   Conversation?  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userEmail])
}

model FormResponse {
  id        String   @id @default(cuid())
  formId    String
  response  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([formId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model Conversation {
  id        String    @id @default(cuid())
  userEmail String
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  messages  Message[]
  Form      Form[]

  @@index([userEmail])
}
